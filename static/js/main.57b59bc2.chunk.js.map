{"version":3,"sources":["../../src/utils.js","../../src/DebugOffset.js","../../src/Scrollama.js","../../src/Step.js","index.js"],"names":["markerStyles","position","left","width","height","borderTop","zIndex","offsetTextStyles","fontSize","fontFamily","margin","padding","DebugOffset","offsetMargin","offsetVal","style","top","OBSERVER_NAMES","Scrollama","stepEnter","stepExit","stepProgress","name","o","window","id","step","body","document","html","Math","getPageHeight","viewH","enable","marginTop","marginBottom","options","rootMargin","obs","IntersectionObserver","threshold","entry","isIntersecting","bottom","topAdjusted","bottomAdjusted","intersectionRatio","count","t","ratio","i","progress","resp","element","data","direction","children","prefix","onStepEnter","onStepExit","onStepProgress","offset","debug","React","childId","isNaN","this","handleResize","isDebug","state","props","ref","Component","PropTypes","func","Step","offsetHeight","nodeRef","Graphic","steps","backgroundColor","setState","classes","className","navbar","href","pageTitle","pageSubtitle","graphicContainer","scroller","map","value","key","round","graphic","PureComponent","StyledGraphic","injectSheet","display","right","color","textAlign","justifyContent","flexBasis","alignSelf","paddingTop","paddingBottom","border","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.57b59bc2.chunk.js","sourcesContent":["export const getPageHeight = () => {\n  const body = document.body;\n  const html = document.documentElement;\n\n  return Math.max(\n    body.scrollHeight,\n    body.offsetHeight,\n    html.clientHeight,\n    html.scrollHeight,\n    html.offsetHeight,\n  );\n};\n","import React from 'react';\n\n// Since these styles are the only styles in the library, I opted to use inline\n// styling to maintain dependency independence\nconst markerStyles = {\n  position: 'fixed',\n  left: 0,\n  width: '100%',\n  height: 0,\n  borderTop: '2px dashed black',\n  zIndex: 9999,\n};\nconst offsetTextStyles = {\n  fontSize: '12px',\n  fontFamily: 'monospace',\n  margin: 0,\n  padding: 6,\n};\n\nconst DebugOffset = ({ offsetMargin, offsetVal }) => (\n  <div style={{ ...markerStyles, top: offsetMargin }}>\n    <p style={offsetTextStyles}>trigger: {offsetVal}</p>\n  </div>\n);\n\nexport default DebugOffset;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPageHeight } from './utils';\nimport DebugOffset from './DebugOffset';\n\nconst OBSERVER_NAMES = [\n  'stepAbove',\n  'stepBelow',\n  'stepProgress',\n  'viewportAbove',\n  'viewportBelow',\n];\n\nclass Scrollama extends Component {\n  // step trigger callbacks\n  cb = {\n    stepEnter: () => null,\n    stepExit: () => null,\n    stepProgress: () => null,\n  };\n\n  // intersection observers\n  io = {};\n\n  // disconnects all observers of a certain function\n  disconnectObserver = name =>\n    this.io[name] && this.io[name].forEach(o => o.disconnect());\n\n  // stores step elements by id\n  stepElIds = [];\n\n  viewH = 0;\n  pageH = 0;\n  offsetVal = 0;\n  offsetMargin = 0;\n  previousYOffset = 0;\n  progressThreshold = 0;\n\n  direction = 'down';\n\n  updateDirection = () => {\n    if (window.pageYOffset > this.previousYOffset) {\n      this.direction = 'down';\n    } else if (window.pageYOffset < this.previousYOffset) {\n      this.direction = 'up';\n    }\n    this.previousYOffset = window.pageYOffset;\n  };\n\n  isReady = false;\n  isEnabled = false;\n  isDebug = false;\n\n  progressMode = false;\n\n  constructor(props) {\n    super(props);\n    const {\n      children,\n      prefix,\n      onStepEnter,\n      onStepExit,\n      onStepProgress,\n      offset,\n      progress,\n      threshold,\n      debug,\n    } = this.props;\n\n    React.Children.forEach(children, (child, idx) => {\n      const childId = `scrollama-${prefix ? prefix + '-' : ''}${idx}`;\n      this[childId] = React.createRef();\n      this.stepElIds.push(childId);\n    });\n\n    if (offset && !isNaN(offset))\n      this.offsetVal = Math.min(Math.max(0, offset), 1);\n\n    this.cb.stepEnter = onStepEnter;\n    this.cb.stepExit = onStepExit;\n    this.cb.stepProgress = onStepProgress;\n\n    this.isDebug = debug;\n    this.progressMode = progress;\n    this.progressThreshold = Math.max(1, +threshold);\n\n    this.isReady = true;\n\n    // offsetMargin stored in state because it's the only property that is\n    // changed after Scrollama's construction and may be rendered (<DebugOffset/>'s\n    // position depends on it)\n    this.state = {\n      offsetMargin: 0,\n    };\n  }\n\n  async componentDidMount() {\n    await this.handleResize();\n    this.handleEnable(true);\n    window.addEventListener('resize', this.handleResize);\n    await this.handleResize(); // TODO: remove redundancy\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n    this.handleEnable(false);\n  }\n\n  getStep = id => {\n    const step = this[id];\n    if (step && step.current) {\n      return step.current;\n    }\n    throw 'Could not get step with id ' + id;\n  };\n\n  handleResize = () => {\n    this.viewH = window.innerHeight;\n    this.pageH = getPageHeight();\n    this.setState({ offsetMargin: this.offsetVal * this.viewH });\n\n    if (this.isReady) {\n      // recalculate offset heights for each step\n      this.stepElIds.forEach(id => {\n        const step = this.getStep(id);\n        step.updateOffsetHeight();\n      });\n      if (this.isEnabled) this.updateIO();\n    }\n  };\n\n  handleEnable = enable => {\n    if (enable && !this.isEnabled) {\n      if (this.isReady) this.updateIO();\n      this.isEnabled = true;\n    } else {\n      OBSERVER_NAMES.forEach(this.disconnectObserver);\n      this.isEnabled = false;\n    }\n  };\n\n  // Recreate all intersection observers\n  updateIO = () => {\n    OBSERVER_NAMES.forEach(this.disconnectObserver);\n    this.updateStepAboveIO();\n    this.updateStepBelowIO();\n\n    if (this.progressMode) this.updateStepProgressIO();\n  };\n\n  /* INTERSECTION OBSERVER CREATORS */\n\n  // Create observers for intersections above steps\n  updateStepAboveIO = () => {\n    const { offsetMargin } = this.state;\n    this.io.stepAbove = this.stepElIds.map(id => {\n      const step = this.getStep(id);\n      const marginTop = -offsetMargin + step.state.offsetHeight;\n      const marginBottom = offsetMargin - this.viewH;\n      const options = {\n        rootMargin: `${marginTop}px 0px ${marginBottom}px 0px`,\n      };\n\n      const obs = new IntersectionObserver(this.intersectStepAbove, options);\n      obs.observe(step.getDOMNode());\n      return obs;\n    });\n  };\n\n  // Create observers for intersections below steps\n  updateStepBelowIO = () => {\n    const { offsetMargin } = this.state;\n    this.io.stepBelow = this.stepElIds.map(id => {\n      const step = this.getStep(id);\n      const marginTop = -offsetMargin;\n      const marginBottom = offsetMargin - this.viewH + step.state.offsetHeight;\n      const options = {\n        rootMargin: `${marginTop}px 0px ${marginBottom}px 0px`,\n      };\n\n      const obs = new IntersectionObserver(this.intersectStepBelow, options);\n      obs.observe(step.getDOMNode());\n      return obs;\n    });\n  };\n\n  // Create observers for progress\n  updateStepProgressIO = () => {\n    const { offsetMargin } = this.state;\n    this.io.stepProgress = this.stepElIds.map(id => {\n      const step = this.getStep(id);\n      const marginTop = -offsetMargin + step.state.offsetHeight;\n      const marginBottom = offsetMargin - this.viewH;\n      const options = {\n        rootMargin: `${marginTop}px 0px ${marginBottom}px 0px`,\n        threshold: this.createThreshold(step.state.offsetHeight),\n      };\n\n      const obs = new IntersectionObserver(this.intersectStepProgress, options);\n      obs.observe(step.getDOMNode());\n      return obs;\n    });\n  };\n\n  /* INTERSECTION OBSERVER HANDLERS */\n\n  // Handles scrolling down and entering or scrolling up and leaving a step\n  intersectStepAbove = ([entry]) => {\n    this.updateDirection();\n    const { offsetMargin } = this.state;\n    const {\n      isIntersecting,\n      boundingClientRect: { top, bottom },\n      target: { id },\n    } = entry;\n\n    const topAdjusted = top - offsetMargin;\n    const bottomAdjusted = bottom - offsetMargin;\n\n    const step = this.getStep(id);\n\n    if (\n      isIntersecting &&\n      topAdjusted <= 0 &&\n      bottomAdjusted >= 0 &&\n      this.direction === 'down' &&\n      step.state.state !== 'enter'\n    )\n      this.notifyStepEnter(step, this.direction);\n\n    // Exiting from above means not intersecting and topAdjusted is positive\n    if (\n      !isIntersecting &&\n      topAdjusted > 0 &&\n      this.direction === 'up' &&\n      step.state.state === 'enter'\n    )\n      this.notifyStepExit(step, this.direction);\n  };\n\n  // Handles scrolling up and entering or scrolling down and leaving a step\n  intersectStepBelow = ([entry]) => {\n    this.updateDirection();\n    const { offsetMargin } = this.state;\n    const {\n      isIntersecting,\n      boundingClientRect: { top, bottom },\n      target: { id },\n    } = entry;\n\n    const topAdjusted = top - offsetMargin;\n    const bottomAdjusted = bottom - offsetMargin;\n\n    const step = this.getStep(id);\n\n    if (\n      isIntersecting &&\n      topAdjusted <= 0 &&\n      bottomAdjusted >= 0 &&\n      this.direction === 'up' &&\n      step.state.state !== 'enter'\n    )\n      this.notifyStepEnter(step, this.direction);\n\n    if (\n      !isIntersecting &&\n      bottomAdjusted < 0 &&\n      this.direction === 'down' &&\n      step.state.state === 'enter'\n    )\n      this.notifyStepExit(step, this.direction);\n  };\n\n  intersectStepProgress = ([entry]) => {\n    this.updateDirection();\n    const {\n      isIntersecting,\n      intersectionRatio,\n      boundingClientRect: { bottom },\n      target: { id },\n    } = entry;\n\n    const bottomAdjusted = bottom - this.state.offsetMargin;\n    if (isIntersecting && bottomAdjusted >= 0)\n      this.notifyStepProgress(this.getStep(id), +intersectionRatio.toFixed(3));\n  };\n\n  createThreshold = height => {\n    const count = Math.ceil(height / this.progressThreshold);\n    const t = [];\n    const ratio = 1 / count;\n    for (let i = 0; i < count; i += 1) {\n      t.push(i * ratio);\n    }\n    t.push(1);\n    return t;\n  };\n\n  /* NOTIFY CALLBACKS */\n\n  notifyStepProgress = (step, progress) => {\n    if (progress !== undefined) step.progress(progress);\n\n    const resp = {\n      element: step.getDOMNode(),\n      data: step.getData(),\n      progress: step.state.progress,\n    };\n    if (step.state.state === 'enter') this.cb.stepProgress(resp);\n  };\n\n  notifyStepEnter = (step, direction) => {\n    step.enter(direction);\n\n    const resp = {\n      element: step.getDOMNode(),\n      data: step.getData(),\n      direction,\n    };\n    if (this.cb.stepEnter) this.cb.stepEnter(resp);\n\n    if (this.progressMode) this.notifyStepProgress(step);\n  };\n\n  notifyStepExit = (step, direction) => {\n    if (this.progressMode) {\n      if (direction === 'down' && step.state.progress < 1)\n        this.notifyStepProgress(step, 1);\n      if (direction === 'up' && step.state.progress > 0)\n        this.notifyStepProgress(step, 0);\n    }\n    step.exit(direction);\n\n    const resp = {\n      element: step.getDOMNode(),\n      data: step.getData(),\n      direction,\n    };\n    if (this.cb.stepExit) this.cb.stepExit(resp);\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.isDebug && (\n          <DebugOffset\n            offsetMargin={this.state.offsetMargin}\n            offsetVal={this.offsetVal}\n          />\n        )}\n        {React.Children.map(this.props.children, (child, index) => {\n          const id = this.stepElIds[index];\n          return React.cloneElement(child, {\n            id,\n            ref: this[id],\n          });\n        })}\n      </Fragment>\n    );\n  }\n}\n\nScrollama.defaultProps = {\n  offset: 0.33,\n  progress: false,\n  threshold: 4,\n};\n\nScrollama.propTypes = {\n  offsetVal: PropTypes.number,\n  debug: PropTypes.bool,\n  onStepEnter: PropTypes.func,\n  onStepExit: PropTypes.func,\n  onStepProgress: PropTypes.func,\n};\n\nexport default Scrollama;\n","import React, { Component } from 'react';\n\nclass Step extends Component {\n  state = {\n    direction: null, // 'up' or 'down'\n    state: null, // 'enter' or 'exit'\n    offsetHeight: null,\n    progress: 0,\n  };\n\n  nodeRef = React.createRef();\n\n  getDOMNode = () => this.nodeRef.current;\n\n  getData = () => this.props.data;\n\n  updateOffsetHeight = () =>\n    this.setState({ offsetHeight: this.getDOMNode().offsetHeight });\n\n  enter = direction => this.setState({ state: 'enter', direction });\n  exit = direction => this.setState({ state: 'exit', direction });\n  progress = progress => this.setState({ progress });\n\n  render() {\n    const { id, children } = this.props;\n\n    return React.cloneElement(React.Children.only(children), {\n      // place id on child to retrieve id from the raw DOM node (which\n      // is what the intersection observer gives our callback\n      id,\n\n      // place ref on child to calculate offsets\n      ref: this.nodeRef,\n    });\n  }\n}\n\nexport default Step;\n","import React, { PureComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport injectSheet from 'react-jss';\nimport { Scrollama, Step } from 'react-scrollama';\n\nconst styles = {\n  navbar: {\n    position: 'fixed',\n    display: 'flex',\n    top: 0,\n    right: 0,\n    zIndex: 1,\n    '& a': {\n      display: 'block',\n      fontFamily: 'Helvetica',\n      fontSize: '20px',\n      color: '#00e',\n      padding: '20px',\n    },\n  },\n  pageTitle: {\n    fontFamily: 'Helvetica',\n    textAlign: 'center',\n    fontSize: '30px',\n    margin: '110px 0 10px',\n    '& a': {\n      color: '#00e',\n    },\n  },\n  pageSubtitle: {\n    margin: 0,\n    fontFamily: 'Helvetica',\n    textAlign: 'center',\n    fontSize: '24px',\n    color: '#888',\n  },\n  graphicContainer: {\n    padding: '40vh 2vw 70vh',\n    display: 'flex',\n    fontFamily: 'Helvetica',\n    justifyContent: 'space-between',\n  },\n  graphic: {\n    flexBasis: '60%',\n    position: 'sticky',\n    width: '100%',\n    padding: '5rem 0',\n    top: '160px',\n    alignSelf: 'flex-start',\n    backgroundColor: '#aaa',\n    '& p': {\n      fontSize: '5rem',\n      textAlign: 'center',\n      color: '#fff',\n    },\n  },\n  scroller: {\n    flexBasis: '35%',\n  },\n  step: {\n    margin: '0 auto 2rem auto',\n    paddingTop: 200,\n    paddingBottom: 200,\n    border: '1px solid #333',\n    '& p': {\n      textAlign: 'center',\n      padding: '1rem',\n      fontSize: '1.5rem',\n    },\n    '&:last-child': {\n      marginBottom: 0,\n    },\n  },\n};\n\nclass Graphic extends PureComponent {\n  state = {\n    data: 0,\n    steps: [10, 20, 30],\n    progress: 0,\n  };\n\n  onStepEnter = ({ element, data }) => {\n    element.style.backgroundColor = 'lightgoldenrodyellow';\n    this.setState({ data });\n  };\n\n  onStepExit = ({ element }) => {\n    element.style.backgroundColor = '#fff';\n  };\n\n  onStepProgress = ({ element, progress }) => {\n    this.setState({ progress });\n  };\n\n  render() {\n    const { data, steps, progress } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <div className={classes.navbar}>\n          <a href=\"https://github.com/jsonkao/react-scrollama\">GitHub</a>\n        </div>\n        <p className={classes.pageTitle}>\n          <a href=\"https://github.com/jsonkao/react-scrollama\">React Scrollama</a>\n          {' '}Example\n        </p>\n        <p className={classes.pageSubtitle}>Scroll ↓</p>\n        <div className={classes.graphicContainer}>\n          <div className={classes.scroller}>\n            <Scrollama\n              onStepEnter={this.onStepEnter}\n              onStepExit={this.onStepExit}\n              progress\n              onStepProgress={this.onStepProgress}\n              offset={0.4}\n              debug\n            >\n              {steps.map(value => (\n                <Step data={value} key={value}>\n                  <div className={classes.step}>\n                    <p>step value: {value}</p>\n                    {value === data && <p>{Math.round(progress * 100)}%</p>}\n                  </div>\n                </Step>\n              ))}\n            </Scrollama>\n          </div>\n          <div className={classes.graphic}>\n            <p>{data}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst StyledGraphic = injectSheet(styles)(Graphic);\n\nReactDOM.render(<StyledGraphic />, document.getElementById('root'));\n"],"sourceRoot":""}